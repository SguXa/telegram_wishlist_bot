import csv
import io
from collections import defaultdict
from html import escape as html_escape
from typing import Dict, List, Tuple

from core.models import Wish


DEFAULT_CATEGORY_TITLE = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
DEFAULT_CATEGORY_EMOJI = "‚ú®"

# Provide a small dictionary of category keywords to emojis so that users get
# a sensible icon automatically. Matching is case-insensitive and uses
# substring matching for flexibility.
CATEGORY_EMOJI_MAP = {
    "—Ç–µ—Ö": "üíª",
    "tech": "üíª",
    "–≥–∞–¥–∂–µ—Ç": "üì±",
    "gadget": "üì±",
    "book": "üìö",
    "–∫–Ω–∏–≥": "üìö",
    "music": "üéß",
    "–º—É–∑": "üéß",
    "food": "üçΩÔ∏è",
    "–µ–¥–∞": "üçΩÔ∏è",
    "–∫–æ—Ñ": "‚òï",
    "coffee": "‚òï",
    "—Å–ø–æ—Ä—Ç": "‚öΩ",
    "sport": "‚öΩ",
    "–∏–≥—Ä": "üéÆ",
    "game": "üéÆ",
    "–æ–±—É–≤": "üëü",
    "shoe": "üëü",
    "clothes": "üëï",
    "–æ–¥–µ–∂": "üëï",
    "home": "üè†",
    "–¥–æ–º": "üè†",
    "travel": "‚úàÔ∏è",
    "trip": "‚úàÔ∏è",
    "–ø—É—Ç–µ—à–µ": "‚úàÔ∏è",
    "car": "üöó",
    "–∞–≤—Ç–æ": "üöó",
    "beauty": "üíÑ",
    "–∫–æ—Å–º–µ—Ç": "üíÑ",
    "—É—Ö–æ–¥": "üß¥",
    "–∑–¥–æ—Ä–æ–≤": "ü©∫",
}


def category_to_emoji(category: str) -> str:
    if not category:
        return DEFAULT_CATEGORY_EMOJI
    key = category.strip().lower()
    for needle, emoji in CATEGORY_EMOJI_MAP.items():
        if needle in key:
            return emoji
    return DEFAULT_CATEGORY_EMOJI


def escape_html_text(value: str) -> str:
    return html_escape(value, quote=True) if value else ""


def build_wish_block(wish: Wish) -> str:
    lines = [f"({wish.priority}) {escape_html_text(wish.title)}"]
    if wish.link:
        lines.append(f"   üîó {escape_html_text(wish.link)}")
    if wish.description:
        lines.append(f"   üìù {escape_html_text(wish.description)}")
    return "\n".join(lines)


def sort_wishes_for_display(wishes: List[Wish]) -> List[Tuple[str, List[Wish]]]:
    grouped: Dict[str, List[Wish]] = defaultdict(list)
    for wish in wishes:
        category = wish.category.strip() if wish.category else ""
        category = category or DEFAULT_CATEGORY_TITLE
        grouped[category].append(wish)

    result: List[Tuple[str, List[Wish]]] = []
    for category, items in grouped.items():
        sorted_items = sorted(items, key=lambda w: w.priority, reverse=True)
        result.append((category, sorted_items))

    result.sort(key=lambda item: item[0].casefold())
    return result


def compose_export_txt(wishes: List[Wish]) -> str:
    if not wishes:
        return "–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç."

    lines: List[str] = []
    for category, items in sort_wishes_for_display(wishes):
        emoji = category_to_emoji(category if category != DEFAULT_CATEGORY_TITLE else "")
        lines.append(f"{emoji} {category}")
        for wish in items:
            lines.append(build_wish_block(wish))
            lines.append("")  # extra newline between wishes
        lines.append("")  # extra newline between categories
    return "\n".join(line for line in lines if line is not None).strip() + "\n"


def compose_export_csv(wishes: List[Wish]) -> str:
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow([
        "–ù–∞–∑–≤–∞–Ω–∏–µ",
        "–°—Å—ã–ª–∫–∞",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "–û–ø–∏—Å–∞–Ω–∏–µ",
        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    ])
    return output.getvalue()

